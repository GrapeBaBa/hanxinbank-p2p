allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'
}

project(':') {
    idea {
        project {
            jdkName = JavaVersion.VERSION_1_8
            languageLevel = JavaVersion.VERSION_1_8

            ipr.withXml { xml ->
                def mapping = xml.node.component.find { it.@name == "VcsDirectoryMappings" }.mapping
                // mapping.@vcs = 'Git'
                mapping.@directory = '$PROJECT_DIR$'
            }
        }

        workspace.iws.withXml { provider ->
            def junitDefaults = provider.node.component.find { it.@name == 'RunManager' }.configuration.find {
                it.@type == 'JUnit'
            }
            junitDefaults.option.find { it.@name == 'WORKING_DIRECTORY' }.@value = '$MODULE_DIR$'
        }
    }
}

subprojects {
    apply plugin: 'java'
    // apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: 'jdepend'
    apply plugin: 'pmd'
    apply plugin: 'spring-boot'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked"
        options.compilerArgs << "-Xlint:deprecation"
    }

    repositories {
        mavenCentral()
    }

    ext {
        guavaVersion = '18.0'
        junitVersion = '4.11'
        hamcrestVersion = '1.3'
        mockitoVersion = '1.10.8'
        springBootVersion = '1.2.0.RELEASE'
        slf4jVersion = '1.7.9'
        logbackVersion = '1.1.2'
        jodaTimeVersion = '2.6'
        javaMoneyVersion = '1.0-RC1'
    }



    it.dependencies {
        compile("com.google.guava:guava:$guavaVersion",
                "org.slf4j:slf4j-api:$slf4jVersion",
                "org.slf4j:jcl-over-slf4j:$slf4jVersion",
                "ch.qos.logback:logback-classic:$logbackVersion",
                "joda-time:joda-time:$jodaTimeVersion",
                "org.javamoney:moneta:$javaMoneyVersion",
                "org.springframework.boot:spring-boot-starter-web:$springBootVersion")

        testCompile("junit:junit-dep:$junitVersion",
                "org.hamcrest:hamcrest-core:$hamcrestVersion",
                "org.hamcrest:hamcrest-library:$hamcrestVersion",
                "org.mockito:mockito-core:$mockitoVersion"
        )

    }

    //   checkstyle {
    //      configFile = file("$rootProject.projectDir/config/checkstyle/sun_checks.xml")
    //      toolVersion = '6.0'
    //  }
}

buildscript {
    ext {
        springBootVersion = '1.2.0.RELEASE'
        flywayVersion = '3.1'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.flywaydb:flyway-gradle-plugin:$flywayVersion")
    }
}

eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

